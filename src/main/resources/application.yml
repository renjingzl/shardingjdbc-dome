#API 变更历史：https://shardingsphere.apache.org/document/5.0.0/cn/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter/
#shardingsphere3.x自己添加数据源配置类方式
#spring:
#  datasource:
#    db0:
#      driver-class-name: com.mysql.jdbc.Driver
#      url: jdbc:mysql://localhost:3310/
#      username: root
#      password: root



#shardingsphere3.x整合spring boot starter
#sharding:
#  jdbc:
#    datasource:
#      names: db0
#      db0:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
#        url: jdbc:log4jdbc:mysql://localhost:3306/test
#        username: root
#        password: root
#    config:
#      sharding:
#        props:
#          sql.show: true
#        tables:
#          orders:
#            key-generator-column-name: order_id  #主键
#            actual-data-nodes: db0.orders_$->{0..9}  #数据节点
#            table-strategy:  #分表策略
#              standard:
#                sharding-column: order_no
#                precise-algorithm-class-name: com.example.demo.config.OrdersTableShardingAlgorithm
##              inline:
##                sharding-column: order_no
##                algorithm-expression: orders$->{order_no % 10} #算法行表达式，需符合groovy语法



#shardingsphere5.x
spring:
  datasource:
    # 动态数据源配置
    dynamic:
      datasource:
        tour:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.jdbc.Driver
          url: jdbc:mysql://localhost:3306/tour_business?serverTimezone=GMT%2b8:00&useUnicode=true&characterEncoding=utf8&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&useSSL=false
          username: root
          password: root
        avalon:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.jdbc.Driver
          url: jdbc:mysql://localhost:3307/avalon_ads?serverTimezone=GMT%2b8:00&useUnicode=true&characterEncoding=utf8&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&useSSL=false
          username: root
          password: root
      # 指定默认数据源名称
      primary: tour
  shardingsphere:
    datasource:
      common:
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
      names: db0,db1
      db0:
        url: jdbc:mysql://localhost:3306/test
        username: root
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
      db1:
        url: jdbc:mysql://localhost:3306/zkq_oms_test?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
        username: root
        password: root
        type: com.alibaba.druid.pool.DruidDataSource
    #默认数据源，未分片的表默认执行库
    sharding:
        default-data-source-name: db1
    rules:
     sharding:
        key-generators:
          #此处必须要配置，否则会导致报错，因为shardingsphere-jdbc-core-spring-boot-starter需要加载此项配置，官网的demo例子有错
          #分布式序列算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/keygen/
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 123
        sharding-algorithms:
          #分片算法：https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/sharding/
          table-inline:
            type: MOD
            props:
              sharding-count: 10
        tables:
          orders:
            # 配置orders表的分表的规则
            actual-data-nodes: db0.orders_$->{0..9}
            table-strategy:
              standard:
                sharding-column: order_no
                sharding-algorithm-name: table-inline
    enabled: true
    # 展示修改以后的sql语句
    props:
      sql-show: true


mybatis:
    configuration:
        map-underscore-to-camel-case: true
        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    type-aliases-package: com.example.demo.entity
    mapper-locations: classpath:mapper/*.xml
